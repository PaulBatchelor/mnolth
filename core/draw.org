#+TITLE: Draw
Some basic drawing primitives, using =gfxbuf=.

WIP.

#+NAME: draw.c
#+BEGIN_SRC c :tangle core/draw.c
#include "mathc/mathc.h"
#include "gfxbuf.h"
#include "draw.h"
<<funcs>>
#+END_SRC

#+NAME: draw.h
#+BEGIN_SRC c :tangle core/draw.h
#ifndef MNO_DRAW_H
#define MNO_DRAW_H
<<funcdefs>>
#endif
#+END_SRC

#+NAME: funcdefs
#+BEGIN_SRC c
void gfxdrw_rect_filled(gfxbuf *buf,
                        int x, int y,
                        int w, int h,
                        int clr);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
void gfxdrw_rect_filled(gfxbuf *buf,
                        int xpos, int ypos,
                        int w, int h,
                        int clr)
{
    gfxbuf_pixel pix;
    int xe, ye;
    int x, y;

    xe = xpos + w;
    ye = ypos + h;

    pix = gfxbuf_clrget(buf, clr);

    for (y = ypos; y < ye; y++) {
        for (x = xpos; x < xe; x++) {
            gfxbuf_set(buf, x, y, pix);
        }
    }

}
#+END_SRC

#+NAME: funcdefs
#+BEGIN_SRC c
void gfxdrw_circ_filled(gfxbuf *gfx,
                        double cx, double cy,
                        double r,
                        int clrpos);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
float sdf_circle(struct vec2 p, float r);
float sdf_sign(float x);
struct vec2 sdf_normalize(struct vec2 pos, struct vec2 res);
float sdf_smoothstep(float e0, float e1, float x);

static void circ(gfxbuf_state *st)
{
    float d;
    struct vec3 col;
    float alpha;
    struct vec2 p;
    struct vec2 res;
    gfxbuf_pixel *pix;
    struct vec3 bg;


    res = svec2(st->info->rw, st->info->rh);

    pix = st->info->ud;

    p = sdf_normalize(svec2(st->x, st->y), res);
    d = -sdf_circle(p, 0.9);

    alpha = 0;
    alpha = sdf_sign(d) > 0;

    alpha += sdf_smoothstep(3.0 / st->info->rw, 0.0, fabs(d));
    alpha = clampf(alpha, 0, 1);

    bg.x = st->out->r;
    bg.y = st->out->g;
    bg.z = st->out->b;

    bg = svec3(st->out->r, st->out->g, st->out->b);
    col = svec3(pix->r, pix->g, pix->b);
    col = svec3_lerp(bg, col, alpha);

    st->out->r = col.x;
    st->out->g = col.y;
    st->out->b = col.z;
}

void gfxdrw_circ_filled(gfxbuf *gfx,
                        double cx, double cy,
                        double r,
                        int clrpos)
{
    gfxbuf_pixel clr;
    int x, y;
    int w, h;

    w = 2 * r;
    h = w;

    x = cx - r;
    y = cy - r;

    clr = gfxbuf_clrget(gfx, clrpos);

    gfxbuf_draw(gfx, x, y, w, h, circ, &clr);
}
#+END_SRC
