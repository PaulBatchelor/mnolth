#+TITLE: Draw
Some basic drawing primitives, using =gfxbuf=.
* Tangled Files
#+NAME: draw.c
#+BEGIN_SRC c :tangle core/draw.c
#include "mathc/mathc.h"
#include "gfxbuf.h"
#include "draw.h"
#include "sdf2d/sdf.h"
<<funcs>>
#+END_SRC

#+NAME: draw.h
#+BEGIN_SRC c :tangle core/draw.h
#ifndef MNO_DRAW_H
#define MNO_DRAW_H
<<funcdefs>>
#endif
#+END_SRC
* Rectangle
#+NAME: funcdefs
#+BEGIN_SRC c
void gfxdrw_rect_filled(gfxbuf *buf,
                        int x, int y,
                        int w, int h,
                        int clr);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
void gfxdrw_rect_filled(gfxbuf *buf,
                        int xpos, int ypos,
                        int w, int h,
                        int clr)
{
    gfxbuf_pixel pix;
    int xe, ye;
    int x, y;

    xe = xpos + w;
    ye = ypos + h;

    pix = gfxbuf_clrget(buf, clr);

    for (y = ypos; y < ye; y++) {
        for (x = xpos; x < xe; x++) {
            gfxbuf_set(buf, x, y, pix);
        }
    }

}
#+END_SRC
* Circle
#+NAME: funcdefs
#+BEGIN_SRC c
void gfxdrw_circ_filled(gfxbuf *gfx,
                        double cx, double cy,
                        double r,
                        int clrpos);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
static void circ(gfxbuf_state *st)
{
    float d;
    struct vec3 col;
    float alpha;
    struct vec2 p;
    struct vec2 res;
    gfxbuf_pixel *pix;
    struct vec3 bg;


    res = svec2(st->info->rw, st->info->rh);

    pix = st->info->ud;

    p = sdf_normalize(svec2(st->x, st->y), res);
    d = -sdf_circle(p, 0.9);

    alpha = 0;
    alpha = sdf_sign(d) > 0;

    alpha += sdf_smoothstep(3.0 / st->info->rw, 0.0, fabs(d));
    alpha = clampf(alpha, 0, 1);

    bg.x = st->out->r;
    bg.y = st->out->g;
    bg.z = st->out->b;

    bg = svec3(st->out->r, st->out->g, st->out->b);
    col = svec3(pix->r, pix->g, pix->b);
    col = svec3_lerp(bg, col, alpha);

    st->out->r = col.x;
    st->out->g = col.y;
    st->out->b = col.z;
}

void gfxdrw_circ_filled(gfxbuf *gfx,
                        double cx, double cy,
                        double r,
                        int clrpos)
{
    gfxbuf_pixel clr;
    int x, y;
    int w, h;

    w = 2 * r;
    h = w;

    x = cx - r;
    y = cy - r;

    clr = gfxbuf_clrget(gfx, clrpos);

    gfxbuf_draw(gfx, x, y, w, h, circ, &clr);
}
#+END_SRC
* Heart
#+NAME: funcdefs
#+BEGIN_SRC c
void gfxdrw_heart(gfxbuf *gfx,
                  double cx,
                  double cy,
                  double r,
                  int clrpos);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
static void heart(gfxbuf_state *st)
{
    float d;
    struct vec3 col;
    float alpha;
    struct vec2 p;
    struct vec2 res;
    gfxbuf_pixel *pix;
    struct vec3 bg;

    res = svec2(st->info->rw, st->info->rh);

    pix = st->info->ud;

    /* p = sdf_normalize(svec2(st->x, st->y), res); */
    p = sdf_heart_center(svec2(st->x, st->y), res);
    d = sdf_heart(p);

    alpha = 0;
    alpha = -sdf_sign(d) > 0;

    alpha += sdf_smoothstep(3.0 / st->info->rw, 0.0, fabs(d));
    alpha = clampf(alpha, 0, 1);

    bg.x = st->out->r;
    bg.y = st->out->g;
    bg.z = st->out->b;

    bg = svec3(st->out->r, st->out->g, st->out->b);
    col = svec3(pix->r, pix->g, pix->b);
    col = svec3_lerp(bg, col, alpha);

    st->out->r = col.x;
    st->out->g = col.y;
    st->out->b = col.z;
}

void gfxdrw_heart(gfxbuf *gfx,
                  double cx,
                  double cy,
                  double r,
                  int clrpos)
{
    double x;
    double y;
    double w;
    double h;
    gfxbuf_pixel clr;

    x = cx - r;
    y = cy - r;
    w = 2 * r;
    h = w;
    clr = gfxbuf_clrget(gfx, clrpos);

    gfxbuf_draw(gfx, (int)x, (int)y, (int)w, (int)h, heart, &clr);
}
#+END_SRC
* Rounded Box
#+NAME: funcdefs
#+BEGIN_SRC c
void gfxdrw_rounded_box(gfxbuf *gfx,
                        double x,
                        double y,
                        double w,
                        double h,
                        double r,
                        double scale,
                        int clrpos);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
struct rounded_box_d {
    gfxbuf_pixel pix;
    float roundedness;
    float scale;
};

static void rounded_box(gfxbuf_state *st)
{
    float d;
    struct vec3 col;
    float alpha;
    struct vec2 p;
    struct vec2 res;
    gfxbuf_pixel *pix;
    struct vec3 bg;
    struct rounded_box_d *rb;
    struct vec4 r;
    struct vec2 b;
    float rad;

    res = svec2(st->info->rw, st->info->rh);

    rb = st->info->ud;
    pix = &rb->pix;

    p = sdf_normalize(svec2(st->x, st->y), res);
    b = svec2_one();
    b = svec2_multiply_f(b, rb->scale);
    rad = rb->roundedness;
    r = svec4(rad, rad, rad, rad);
    d = sdf_rounded_box(p, b, r);

    alpha = 0;
    alpha = -sdf_sign(d) > 0;

    alpha += sdf_smoothstep(3.0 / st->info->rw, 0.0, fabs(d));
    alpha = clampf(alpha, 0, 1);

    bg.x = st->out->r;
    bg.y = st->out->g;
    bg.z = st->out->b;

    bg = svec3(st->out->r, st->out->g, st->out->b);
    col = svec3(pix->r, pix->g, pix->b);
    col = svec3_lerp(bg, col, alpha);

    st->out->r = col.x;
    st->out->g = col.y;
    st->out->b = col.z;
}

void gfxdrw_rounded_box(gfxbuf *gfx,
                        double x,
                        double y,
                        double w,
                        double h,
                        double r,
                        double scale,
                        int clrpos)
{
    struct rounded_box_d rb;

    rb.pix = gfxbuf_clrget(gfx, clrpos);
    rb.roundedness = r;
    rb.scale = scale;


    gfxbuf_draw(gfx, (int)x, (int)y, (int)w, (int)h, rounded_box, &rb);
}
#+END_SRC
