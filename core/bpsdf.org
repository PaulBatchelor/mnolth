#+TITLE: BTPRNT + SDFVM
* Overview
Use SDFVM to render 1-bit shapes to a BTPRNT region.
#+NAME: bpsdf.c
#+BEGIN_SRC c :tangle core/bpsdf.c
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <string.h>

#include "sndkit/lil/lil.h"
#include "sndkit/graforge/graforge.h"
#include "sndkit/core.h"
#include "sndkit/nodes/sklil.h"
#include "btprnt/btprnt.h"

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif
#include "mathc/mathc.h"

#include "sdf2d/sdf.h"

#define SDF2D_SDFVM_PRIV
#include "sdf2d/sdfvm.h"

#define BPSDF_PRIV
#include "bpsdf.h"

#include "buffer.h"

#include "lua/lua.h"
#include "lua/lauxlib.h"
#include "lua/lualib.h"

<<static_funcdefs>>
<<funcs>>
#+END_SRC

#+NAME: bpsdf.h
#+BEGIN_SRC c :tangle core/bpsdf.h
#ifndef BPSDF_H
#define BPSDF_H
<<typedefs>>
#ifdef BPSDF_PRIV
<<structs>>
#endif
<<funcdefs>>
#endif
#+END_SRC
* Creating an Instance of SDFVM
Not only does this instantiate SDFVM, but components for
a multi-threaded rendering pipeline. This consists of a
threadpool, with each threadpool getting their own instance
of SDFVM. A set of uniforms is allocated to be shared
amongst all the instances (this is intended to be used for
read-only purposes).
** Struct
#+NAME: typedefs
#+BEGIN_SRC c
typedef struct sdfvm_threadpool sdfvm_threadpool;
#+END_SRC

#+NAME: structs
#+BEGIN_SRC c
struct sdfvm_thread {
    pthread_t thread;
    sdfvm vm;
    int id;
    sdfvm_threadpool *pool;
};

#define BPSDF_MAXTHREADS 8
#define BPSDF_NREGISTERS 16
struct sdfvm_threadpool {
    struct sdfvm_thread threads[BPSDF_MAXTHREADS];
    sdfvm_stacklet uniforms[BPSDF_NREGISTERS];
    int err;
    int errpos;
    int lastop;
    void *userdata;
    struct vec2 bias;
    struct vec2 scale;
};

struct bpsdf_args {
    btprnt_region *bpreg;
    uint8_t *program;
    size_t sz;
};
#+END_SRC
** C function
#+NAME: funcdefs
#+BEGIN_SRC c
void sdfvm_threadpool_init(sdfvm_threadpool *vmthrp);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
void sdfvm_threadpool_init(sdfvm_threadpool *vmthrp)
{
    int i;
    for (i = 0; i < BPSDF_MAXTHREADS; i++) {
        struct sdfvm_thread *th;
        th = &vmthrp->threads[i];
        sdfvm_init(&th->vm);
        sdfvm_uniforms(&th->vm, vmthrp->uniforms, BPSDF_NREGISTERS);
        sdfvm_color_set(&th->vm, svec3(0, 0, 0));
        th->pool = vmthrp;
        th->id = i;
    }
    vmthrp->bias = svec2(0, 0);
    vmthrp->scale = svec2(1, 1);
    vmthrp->err = 0;
    vmthrp->errpos = 0;
    vmthrp->lastop = -1;
}
#+END_SRC
** LIL function
#+NAME: static_funcdefs
#+BEGIN_SRC c
static lil_value_t l_sdfvmnew(lil_t lil,
                              size_t argc,
                              lil_value_t *argv);
#+END_SRC
#+NAME: funcs
#+BEGIN_SRC c
static void delsdfvm(void *ptr)
{
    free(ptr);
    ptr = NULL;
}
static lil_value_t l_sdfvmnew(lil_t lil,
                              size_t argc,
                              lil_value_t *argv)
{
    int rc;
    const char *key;
    sdfvm_threadpool *vmthrp;
    sk_core *core;

    SKLIL_ARITY_CHECK(lil, "bufnew", argc, 1);

    core = lil_get_data(lil);

    key = lil_to_string(argv[0]);

    vmthrp = malloc(sizeof(sdfvm_threadpool));
    sdfvm_threadpool_init(vmthrp);
    rc = sk_core_append(core, key, strlen(key), vmthrp, delsdfvm);

    SKLIL_ERROR_CHECK(lil, rc, "sdfvmnew didn't work out.");

    return NULL;
}
#+END_SRC
* Core Rendering Callback
* The bpsdf command
The =bpsdf= command takes in the follow arguments:
an instance of a btprnt uniform, an instance
of SDFVM, and a mnolth buffer containing
the SDF shader program. bpsdf packages these together
and sends them through the rendering pipeline.
** C function
#+NAME: funcdefs
#+BEGIN_SRC c
int btprnt_sdf(btprnt_region *r,
               sdfvm_threadpool *vmthrp,
               uint8_t *program,
               size_t sz);
int btprnt_sdf_nothreads(btprnt_region *r,
               sdfvm_threadpool *vmthrp,
               uint8_t *program,
               size_t sz);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
<<draw_thread>>
int btprnt_sdf(btprnt_region *r,
               sdfvm_threadpool *vmthrp,
               uint8_t *program,
               size_t sz)
{
    struct bpsdf_args args;
    int i;
    args.program = program;
    args.sz = sz;
    args.bpreg = r;
    vmthrp->userdata = &args;

    vmthrp->err = 0;
    for (i = 0; i < BPSDF_MAXTHREADS; i++) {
        struct sdfvm_thread *th;
        th = &vmthrp->threads[i];
        pthread_create(&th->thread, NULL, draw_thread, th);
    }

    for (i = 0; i < BPSDF_MAXTHREADS; i++) {
        struct sdfvm_thread *th;
        th = &vmthrp->threads[i];
        pthread_join(th->thread, NULL);
    }

    return vmthrp->err;
}

int btprnt_sdf_nothreads(btprnt_region *r,
                         sdfvm_threadpool *vmthrp,
                         uint8_t *program,
                         size_t sz)
{
    struct bpsdf_args args;
    int i;
    args.program = program;
    args.sz = sz;
    args.bpreg = r;
    vmthrp->userdata = &args;

    vmthrp->err = 0;
    for (i = 0; i < BPSDF_MAXTHREADS; i++) {
        struct sdfvm_thread *th;
        th = &vmthrp->threads[i];
        draw_thread(th);
        if (vmthrp->err) return vmthrp->err;
    }
    return vmthrp->err;
}
#+END_SRC

Each drawing thread needs to know about itself (thread ID),
and have the ability to read data shared across threads.
Data for a thread is passed in as a void pointer, this
is converted to data instantiated for this particular
thread. Inside thread data is a reference to the pool it
belongs to. The pool has a generic pointer, which in
this case will get resolved to an instance of BPSDF args.

The threadpool design breaks up a btprnt region into rows,
and coordinates each thread to render particular rows.

#+NAME: draw_thread
#+BEGIN_SRC c
static void *draw_thread(void *data)
{
    struct sdfvm_thread *th;
    sdfvm_threadpool *pool;
    struct bpsdf_args *args;
    int x, y;
    int xstart, ystart;
    int xend, yend;
    int nthreads;
    btprnt_region *reg;
    sdfvm *vm;

    th = (struct sdfvm_thread *)data;
    pool = th->pool;
    args = (struct bpsdf_args *)pool->userdata;
    reg = args->bpreg;
    vm = &th->vm;

    ystart = th->id;
    xstart = 0;
    xend = reg->w;
    yend = reg->h;

    /* hard-coded for now */
    nthreads = BPSDF_MAXTHREADS;

    for (y = ystart; y < yend; y+=nthreads) {
        for(x = xstart; x < xend; x++) {
            float c;
            int bit;
            struct vec2 p, res;
            int rc;

            if (pool->err) break;

            res = svec2(reg->w, reg->h);

            sdfvm_push_vec2(vm, svec2(x, y));
            sdfvm_push_vec2(vm, res);
            sdfvm_normalize(vm);
            sdfvm_pop_vec2(vm, &p);
            p.y = p.y*-1;

            p = svec2_add(p, pool->bias);
            p = svec2_multiply(p, pool->scale);

            c = 1.0;
            sdfvm_point_set(vm, p);
            rc = sdfvm_execute(vm, args->program, args->sz);
            if (rc) {
                pool->err = rc;
                pool->errpos = vm->pos;
                pool->lastop = vm->lastop;
                break;
            }

            if (vm->stackpos > 1) {
                printf("error: stackpos should be 1, it is %d\n",
                    vm->stackpos);
                pool->err = 3;
                break;
            }

            rc = sdfvm_pop_scalar(vm, &c);

            if (rc) {
                pool->err = 2;
                break;
            }

            /* flipped because in btprnt 1 is black, 0 white */
            bit = c < 0.5 ? 1 : 0;
            btprnt_region_draw(reg, x, y, bit);
        }
    }

    return NULL;
}
#+END_SRC
** LIL function
#+NAME: static_funcdefs
#+BEGIN_SRC c
static lil_value_t l_bpsdf(lil_t lil,
                           size_t argc,
                           lil_value_t *argv);
#+END_SRC
#+NAME: funcs
#+BEGIN_SRC c
static lil_value_t l_bpsdf(lil_t lil,
                           size_t argc,
                           lil_value_t *argv)
{
    btprnt_region *reg;
    sdfvm_threadpool *vmthrp;
    mno_buffer *buf;
    sk_core *core;
    void *ud;
    uint8_t *program;
    size_t sz;
    int rc;

    SKLIL_ARITY_CHECK(lil, "bpsdf", argc, 3);
    core = lil_get_data(lil);

    rc = sk_core_generic_pop(core, &ud);
    if (rc) {
        printf("could not get buffer\n");
        return NULL;
    }
    buf = ud;

    rc = sk_core_generic_pop(core, &ud);
    if (rc) {
        printf("could not get sdfvm\n");
        return NULL;
    }
    vmthrp = ud;

    rc = sk_core_generic_pop(core, &ud);
    if (rc) {
        printf("could not get btprnt region\n");
        return NULL;
    }
    reg = ud;

    program = mno_buffer_data(buf);
    sz = mno_buffer_length(buf);
    rc = btprnt_sdf(reg, vmthrp, program, sz);

    if (rc) {
        printf("bpsdf error code %d, pos %d, lastop %d\n",
            rc, vmthrp->errpos, vmthrp->lastop);
    }

    return NULL;
}
#+END_SRC
* LIL Loader
Loads the =bpsdf= and =sdfvmnew= words.

#+NAME: funcdefs
#+BEGIN_SRC c
void lil_load_bpsdf(lil_t lil);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
void lil_load_bpsdf(lil_t lil)
{
    lil_register(lil, "sdfvmnew", l_sdfvmnew);
    lil_register(lil, "bpsdf", l_bpsdf);
}
#+END_SRC
* Lua Loader
This is really for SDFVM, not specifically bpsdf. If
someday this were to be used for more than btprnt, it'll
be moved out (along with the SDFVM specific code here).

#+NAME: funcs
#+BEGIN_SRC c
<<lua_funcs>>
static const luaL_Reg buffer_lib[] = {
    <<lua_entries>>
    {NULL, NULL}
};

int luaopen_sdfvm(lua_State *L)
{
    luaL_newlib(L, buffer_lib);
    return 1;
}
#+END_SRC
** uniset_scalar
Usage:

#+BEGIN_SRC lua
uniset_scalar(vm, pos, x)
#+END_SRC

Sets the uniform at position =pos= to be scalar value =x=.

#+NAME: lua_entries
#+BEGIN_SRC c
{"uniset_scalar", uniset_scalar_lua},
#+END_SRC

#+NAME: lua_funcs
#+BEGIN_SRC c
static int uniset_scalar_lua(lua_State *L)
{
    sdfvm_threadpool *vmthrp;
    float val;
    int pos;

    vmthrp = lua_touserdata(L, 1);
    pos = lua_tointeger(L, 2);
    val = lua_tonumber(L, 3);

    if (pos < 0 || pos >= BPSDF_NREGISTERS) {
        luaL_error(L, "position out of range: %d", pos);
    }

    vmthrp->uniforms[pos].type = SDFVM_SCALAR;
    vmthrp->uniforms[pos].data.s = val;
    return 0;
}
#+END_SRC
** uniset_vec2
Usage:

#+BEGIN_SRC lua
uniset_vec2(vm, pos, x, y)
#+END_SRC

Sets the uniform at position =pos= to be 2d vector =(x, y)=.

#+NAME: lua_entries
#+BEGIN_SRC c
{"uniset_vec2", uniset_vec2_lua},
#+END_SRC

#+NAME: lua_funcs
#+BEGIN_SRC c
static int uniset_vec2_lua(lua_State *L)
{
    sdfvm_threadpool *vmthrp;
    float x, y;
    int pos;

    vmthrp = lua_touserdata(L, 1);
    pos = lua_tointeger(L, 2);
    x = lua_tonumber(L, 3);
    y = lua_tonumber(L, 4);

    if (pos < 0 || pos >= BPSDF_NREGISTERS) {
        luaL_error(L, "position out of range: %d", pos);
    }

    vmthrp->uniforms[pos].type = SDFVM_VEC2;
    vmthrp->uniforms[pos].data.v2 = svec2(x, y);
    return 0;
}
#+END_SRC
** uniset_vec3
Usage:

#+BEGIN_SRC lua
uniset_vec3(vm, pos, x, y, z)
#+END_SRC

Sets the uniform at position =pos= to be 3d vector =(x, y, z)=.

#+NAME: lua_entries
#+BEGIN_SRC c
{"uniset_vec3", uniset_vec3_lua},
#+END_SRC

#+NAME: lua_funcs
#+BEGIN_SRC c
static int uniset_vec3_lua(lua_State *L)
{
    sdfvm_threadpool *vmthrp;
    float x, y, z;
    int pos;

    vmthrp = lua_touserdata(L, 1);
    pos = lua_tointeger(L, 2);
    x = lua_tonumber(L, 3);
    y = lua_tonumber(L, 4);
    z = lua_tonumber(L, 5);

    if (pos < 0 || pos >= BPSDF_NREGISTERS) {
        luaL_error(L, "position out of range: %d", pos);
    }

    vmthrp->uniforms[pos].type = SDFVM_VEC3;
    vmthrp->uniforms[pos].data.v3 = svec3(x, y, z);
    return 0;
}
#+END_SRC
** bias
Applies a global bias to the renderer
#+NAME: lua_entries
#+BEGIN_SRC c
{"bias", bias_lua},
#+END_SRC

#+NAME: lua_funcs
#+BEGIN_SRC c
static int bias_lua(lua_State *L)
{
    sdfvm_threadpool *vmthrp;
    float x, y;

    vmthrp = lua_touserdata(L, 1);
    x = lua_tonumber(L, 2);
    y = lua_tonumber(L, 3);

    vmthrp->bias = svec2(x, y);

    return 0;
}
#+END_SRC
** scale
Applies a global scale to the renderer
#+NAME: lua_entries
#+BEGIN_SRC c
{"scale", scale_lua},
#+END_SRC

#+NAME: lua_funcs
#+BEGIN_SRC c
static int scale_lua(lua_State *L)
{
    sdfvm_threadpool *vmthrp;
    float x, y;

    vmthrp = lua_touserdata(L, 1);
    x = lua_tonumber(L, 2);
    y = lua_tonumber(L, 3);

    vmthrp->scale = svec2(x, y);

    return 0;
}
#+END_SRC
