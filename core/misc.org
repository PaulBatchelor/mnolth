#+TITLE: Miscellaneous
* What is this?
This file is where I put things that don't really have
a home anywhere else.
* Tangled File (misc.c)
#+NAME: misc.c
#+BEGIN_SRC c :tangle core/misc.c
#include <string.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include "sndkit/lil/lil.h"
#include "sndkit/graforge/graforge.h"
#include "sndkit/core.h"
#include "sndkit/nodes/sklil.h"
#include "gest/gest.h"
#include "gest/gestlang.h"
#include "cdb/cdb.h"
#define BITLANG_PRIV
#include "bitlang/bitlang.h"
#include "btprnt/btprnt.h"

#ifdef MNODES
#include "ftlist/ftlist.h"
#endif

#include "gestvm/gestvm.h"

<<lilfuncs>>

void lil_load_misc(lil_t lil)
{
    <<lildefs>>
}
#+END_SRC
* glang_cdb
Usage: glang_cdb gestlang cdbfile key

=glang_cdb= will evaluate a string from a cdb file
inside of an instance of gestlang.

#+NAME: lildefs
#+BEGIN_SRC c
lil_register(lil, "glang_cdb", l_glang_cdb);
#+END_SRC

#+NAME: lilfuncs
#+BEGIN_SRC c
static lil_value_t l_glang_cdb(lil_t lil,
                               size_t argc,
                               lil_value_t *argv)
{
    int rc;
    sk_core *core;
    const char *filename;
    const char *key;
    gestlang_d *gl;
    gest_d *gest;
    void *ud;
    int fd;
    struct cdb cdb;

    core = lil_get_data(lil);

    SKLIL_ARITY_CHECK(lil, "glang_cdb", argc, 3);

    rc = sk_core_generic_pop(core, &ud);
    SKLIL_ERROR_CHECK(lil, rc, "could not get gestlang");
    gl = ud;

    rc = sk_core_generic_pop(core, &ud);
    SKLIL_ERROR_CHECK(lil, rc, "could not get gest");
    gest = ud;

    filename = lil_to_string(argv[2]);
    key = lil_to_string(argv[3]);

    /* rc = gestlang_load(gl, gest, filename); */

    fd = open(filename, O_RDONLY);

    SKLIL_ERROR_CHECK(lil, fd == -1, "could not open cdb file");

    cdb_init(&cdb, fd);

    rc = cdb_find(&cdb, key, strlen(key));

    if (!rc) {
        close(fd);
        SKLIL_ERROR_CHECK(lil, 1, "cdb key not there");
    } else {
        unsigned int vlen, vpos;
        char *val;
        vpos = cdb_datapos(&cdb);
        vlen = cdb_datalen(&cdb);
        val = calloc(1, vlen);
        cdb_read(&cdb, val, vlen, vpos);

        rc = gestlang_parse(gl, gest, val, vlen);
        free(val);
    }

    close(fd);

    SKLIL_ERROR_CHECK(lil, rc, "gestlang parser failed");
    return NULL;
}
#+END_SRC
* bitlang
bitlang has only a few bindings.

=blngnew= creates a new instance of bitlang.

=blngcmp= compiles a bitlang string.

=blgnex= executes a bitlang program, and writes
the contents to a btprnt region.

And should be it, really.

#+NAME: lildefs
#+BEGIN_SRC c
lil_register(lil, "blngnew", l_blngnew);
lil_register(lil, "blngcmp", l_blngcmp);
lil_register(lil, "blngex", l_blngex);
#+END_SRC

#+NAME: lilfuncs
#+BEGIN_SRC c
struct bitpat {
    bitlang vm;
    bitlang_state st;
    char bytes[128]; /* TODO: make a variable size? */
    int err;
};
<<bitlang_funcs>>
#+END_SRC

#+NAME: bitlang_funcs
#+BEGIN_SRC c
static void delbl(void *ud)
{
    free(ud);
}

static lil_value_t l_blngnew(lil_t lil,
                             size_t argc,
                             lil_value_t *argv)
{
    const char *key;
    struct bitpat *bp;
    sk_core *core;
    int rc;

    SKLIL_ARITY_CHECK(lil, "blangnew", argc, 2);

    core = lil_get_data(lil);
    bp = malloc(sizeof(struct bitpat));
    bitlang_init(&bp->vm);
    bitlang_state_init(&bp->st, bp->bytes, 128);
    bp->err = 0;

    key = lil_to_string(argv[0]);

    rc = sk_core_append(core, key, strlen(key), bp, delbl);

    SKLIL_ERROR_CHECK(lil, rc, "could not add key");
    /* sz = lil_to_integer(argv[1]); */
    return NULL;
}
#+END_SRC

#+NAME: lilfuncs
#+BEGIN_SRC c
static lil_value_t l_blngcmp(lil_t lil,
                             size_t argc,
                             lil_value_t *argv)
{
    struct bitpat *bp;
    sk_core *core;
    int rc;
    void *ud;
    const char *str;

    core = lil_get_data(lil);
    SKLIL_ARITY_CHECK(lil, "blngcmp", argc, 2);

    rc = sk_core_generic_pop(core, &ud);
    SKLIL_ERROR_CHECK(lil, rc, "could not get bitlang");

    bp = ud;

    str = lil_to_string(argv[1]);

    bitlang_compile(&bp->st, str);
    return NULL;
}
#+END_SRC

#+NAME: lilfuncs
#+BEGIN_SRC c
static lil_value_t l_blngex(lil_t lil,
                            size_t argc,
                            lil_value_t *argv)
{
    struct bitpat *bp;
    btprnt_region *reg;
    sk_core *core;
    int rc;
    void *ud;
    int t;
    int x, y, w, h;
    int invert;

    core = lil_get_data(lil);
    SKLIL_ARITY_CHECK(lil, "blngex", argc, 3);

    rc = sk_core_generic_pop(core, &ud);
    SKLIL_ERROR_CHECK(lil, rc, "could not get bitpat");
    bp = ud;

    rc = sk_core_generic_pop(core, &ud);
    SKLIL_ERROR_CHECK(lil, rc, "could not get region");
    reg = ud;

    t = lil_to_integer(argv[2]);

    x = 0;
    y = 0;
    w = reg->w;
    h = reg->h;
    bitlang_regset(&bp->vm, 2, w);
    bitlang_regset(&bp->vm, 3, h);
    bitlang_regset(&bp->vm, 4, t);

    invert = 0;

    if (argc > 3) {
        invert = lil_to_integer(argv[3]);
    }

    for (y = 0; y < h; y++) {
        for (x = 0; x < w; x++) {
            int val;
            val = 0;
            bitlang_regset(&bp->vm, 0, x);
            bitlang_regset(&bp->vm, 1, y);
            bitlang_reset(&bp->vm);

            bp->err = bitlang_exec(&bp->vm, &bp->st);
            if (bp->err) {
                printf("error\n");
                break;
            }

            bitlang_pop(&bp->vm, &val);

            if (invert) val = val ? 0 : 1;

            btprnt_region_draw(reg, x, y, val);
        }
    }

    return NULL;
}
#+END_SRC
* gestvmtablist
Used by GestVM if mnodes are enabled (ftlist is in there).

This will set the table list instance of a gestvm node.

#+NAME: lildefs
#+BEGIN_SRC c
#ifdef MNODES
lil_register(lil, "gestvmtablist", l_gestvmtablist);
#endif
#+END_SRC

#+NAME: lilfuncs
#+BEGIN_SRC c
static lil_value_t l_gestvmtablist(lil_t lil,
                                   size_t argc,
                                   lil_value_t *argv)
{ 
    sk_core *core;
    void *ud;
    int rc;
    sp_ftlist *ftl;
    gestvm *gvm;
    sk_table **tablist;
    int sz;

    SKLIL_ARITY_CHECK(lil, "gestvmtablist", argc, 2);
    core = lil_get_data(lil);

    rc = sk_core_generic_pop(core, &ud);
    SKLIL_ERROR_CHECK(lil, rc, "could not get ftlist");
    ftl = ud;

    rc = sk_core_generic_pop(core, &ud);
    SKLIL_ERROR_CHECK(lil, rc, "could not get gestvm");
    gvm = ud;

    tablist = sp_ftlist_list(ftl);
    sz = sp_ftlist_size(ftl);

    gestvm_tablist(gvm, tablist, sz);
    return NULL;
}
#+END_SRC
