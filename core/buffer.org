#+TITLE: mnolth buffer interface
* Overview
This is a very simple memory buffer interface. It's primary
purpose is to make it easier to share raw bytes between
Lua and LIL.

LIL doesn't have a great way of handling blocks memory,
which is needed for =btprnt_uf2_draw_bytes=. The idea
is to construct a pre-allocated chunk of memory that LIL
can read from. The idea is that LIL would run inside of
Lua, and Lua would be able to fill the chunk of memory
before making the call.

Originally, this was designed so I could draw arbitrary
symbols with @!(ref "uf2")!@ (it was built there), but it
also now has a use with @!(ref "bpsdf")!@ storing SDFVM
programs. So, now it has it's own home.

#+NAME: buffer.c
#+BEGIN_SRC c :tangle core/buffer.c
#include <stdlib.h>
#include <string.h>
#include "sndkit/lil/lil.h"
#include "lua/lua.h"
#include "lua/lauxlib.h"
#include "lua/lualib.h"
#include "sndkit/graforge/graforge.h"
#define MNOBUF_PRIV
#include "buffer.h"
#include "sndkit/core.h"
#include "sndkit/nodes/sklil.h"
<<funcs>>
#+END_SRC

#+NAME: buffer.h
#+BEGIN_SRC c :tangle core/buffer.h
#ifndef MNOBUF_H
#define MNOBUF_H
<<typedefs>>
#ifdef MNOBUF_PRIV
<<structs>>
#endif

<<funcdefs>>
#endif
#+END_SRC

** Struct Declaration
#+NAME: typedefs
#+BEGIN_SRC c
typedef struct mno_buffer mno_buffer;
#+END_SRC

#+NAME: structs
#+BEGIN_SRC
struct mno_buffer {
    unsigned char *buf;
    size_t len;
    size_t cap;
};
#+END_SRC
** Creating a new buffer (bufnew via LIL)
The =bufnew= will create a new named buffer in sndkit
pre-allocated to user-defined max capacity (in bytes).

#+BEGIN_SRC lil
bufnew buf 256
#+END_SRC

#+NAME: entries
#+BEGIN_SRC c
lil_register(lil, "bufnew", l_bufnew);
#+END_SRC

#+NAME: loadfuncs
#+BEGIN_SRC c
static void delbuf(void *ptr)
{
    mno_buffer *buf;

    buf = ptr;

    free(buf->buf);
    free(buf);
    ptr = buf = NULL;
}

static lil_value_t l_bufnew(lil_t lil,
                            size_t argc,
                            lil_value_t *argv)
{
    int rc;
    const char *key;
    size_t cap;
    mno_buffer *buf;
    sk_core *core;

    SKLIL_ARITY_CHECK(lil, "bufnew", argc, 2);

    core = lil_get_data(lil);

    key = lil_to_string(argv[0]);
    cap = lil_to_integer(argv[1]);

    buf = malloc(sizeof(mno_buffer));
    buf->buf = calloc(1, cap);
    buf->cap = cap;
    buf->len = 0;

    rc = sk_core_append(core, key, strlen(key), buf, delbuf);

    SKLIL_ERROR_CHECK(lil, rc, "bufnew didn't work out.");

    return NULL;
}
#+END_SRC
** Appending Bytes
*** Appending Bytes in C
#+NAME: funcdefs
#+BEGIN_SRC c
int mno_buffer_appendbyte(mno_buffer *buf, unsigned char c);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
int mno_buffer_appendbyte(mno_buffer *buf, unsigned char c)
{
    if (buf->len >= buf->cap) return 0;
    buf->buf[buf->len] = c;
    buf->len++;
    return 1;
}
#+END_SRC
*** Appending Bytes in Lua
#+NAME: lua_funcs
#+BEGIN_SRC c
static int buffer_append(lua_State *L)
{
    mno_buffer *buf;
    buf = lua_touserdata(L, 1);

    if (lua_istable(L, 2)) {
        lua_pushnil(L);

        while (lua_next(L, 2)) {
            unsigned char byte;
            byte = (unsigned char)lua_tointeger(L, -1) & 0xFF;
            mno_buffer_appendbyte(buf, byte);
            lua_pop(L, 1);
        }
    } else {
        unsigned char byte;
        byte = (unsigned char)lua_tointeger(L, 2) & 0xFF;
        mno_buffer_appendbyte(buf, byte);
    }

    return 0;
}
#+END_SRC
** Clearing the Buffer
This will reset the buffer to zero
*** Clearing the Buffer in C
The =mno_buffer_clear= function will reset the buffer
position to be zero, but it will *not* zero out the
contents.

#+NAME: funcdefs
#+BEGIN_SRC c
void mno_buffer_clear(mno_buffer *buf);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
void mno_buffer_clear(mno_buffer *buf)
{
    buf->len = 0;
}
#+END_SRC
*** Clearing the Buffer in Lua
#+NAME: lua_funcs
#+BEGIN_SRC c
static int buffer_clear(lua_State *L)
{
    mno_buffer *buf;
    buf = lua_touserdata(L, 1);
    mno_buffer_clear(buf);
    return 0;
}
#+END_SRC
** Appending Floating Point values
Floats are tricky to convert to serialized binary.
So, this handles it for us.

Note that this is needed because buffers are going to
be used to store sdfvm programs.
*** Appending a Floating Point value in C
#+NAME: funcdefs
#+BEGIN_SRC c
int mno_buffer_appendfloat(mno_buffer *buf, float f);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
int mno_buffer_appendfloat(mno_buffer *buf, float f)
{
    uint8_t fdata[4];
    float *fptr;
    int i;

    if (buf->len >= (buf->cap - 4)) return 0;
    fptr = (float *)&fdata;
    *fptr = f;
    for (i = 0; i < 4; i++) {
        buf->buf[buf->len + i] = fdata[i];
    }
    buf->len+=4;
    return 1;
}
#+END_SRC
*** Appending a Floating Point value in Lua
#+NAME: lua_funcs
#+BEGIN_SRC c
static int buffer_append_float(lua_State *L)
{
    mno_buffer *buf;
    buf = lua_touserdata(L, 1);

    if (lua_istable(L, 2)) {
        lua_pushnil(L);

        while (lua_next(L, 2)) {
            float f;
            f = lua_tonumber(L, -1);
            mno_buffer_appendfloat(buf, f);
            lua_pop(L, 1);
        }
    } else {
        float f;
        f = lua_tonumber(L, 2);
        mno_buffer_appendfloat(buf, f);
    }

    return 0;
}
#+END_SRC
** Lua and LIL loaders Loader
*** Lua Loader
#+NAME: funcs
#+BEGIN_SRC c
<<lua_funcs>>
static const luaL_Reg buffer_lib[] = {
    {"append", buffer_append},
    {"append_float", buffer_append_float},
    {"clear", buffer_clear},
    {NULL, NULL}
};

int luaopen_mnobuf(lua_State *L)
{
    luaL_newlib(L, buffer_lib);
    return 1;
}
#+END_SRC
*** LIL loader
#+NAME: funcdefs
#+BEGIN_SRC c
void lil_load_mnobuf(lil_t lil);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
<<loadfuncs>>
void lil_load_mnobuf(lil_t lil)
{
    <<entries>>
}
#+END_SRC
** Reading the Buffer
For now, just gets for buffer and size are all that
is needed.

#+NAME: funcdefs
#+BEGIN_SRC c
unsigned char * mno_buffer_data(mno_buffer *buf);
size_t mno_buffer_length(mno_buffer *buf);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
unsigned char * mno_buffer_data(mno_buffer *buf)
{
    return buf->buf;
}

size_t mno_buffer_length(mno_buffer *buf)
{
    return buf->len;
}
#+END_SRC
