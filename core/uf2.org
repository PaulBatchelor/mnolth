#+TITLE: UF2 font rendering
UF2 is the uxn proportional width font format.
* Tangled Files
struct uf2_glyph {
    struct uf2_block tl, bl, tr, br;
};
#+NAME: core/uf2.c
#+BEGIN_SRC c :tangle core/uf2.c
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include "btprnt/btprnt.h"
#include "sndkit/lil/lil.h"
#include "sndkit/graforge/graforge.h"
#include "sndkit/core.h"
#include "sndkit/nodes/sklil.h"
#include "lua/lua.h"
#include "lua/lauxlib.h"
#include "lua/lualib.h"
#define MNOLTH_UF2_PRIV
#include "uf2.h"
#define MNOBUF_PRIV
#include "buffer.h"

int lil_btprnt_region(lil_t lil, sk_core *core, btprnt_region **reg);
<<funcs>>
#+END_SRC

#+NAME: core/uf2.h
#+BEGIN_SRC c :tangle core/uf2.h
#ifndef MNOLTH_UF2_H
#define MNOLTH_UF2_H
#ifdef MNOLTH_UF2_PRIV
<<structs>>
#endif
<<funcdefs>>
#endif
#+END_SRC
* Core Structs
** Block
#+NAME: structs
#+BEGIN_SRC c
struct uf2_block {
    uint8_t data[8];
};
#+END_SRC
** Glyph
#+NAME: structs
#+BEGIN_SRC c
struct uf2_glyph {
    struct uf2_block tl, bl, tr, br;
};
#+END_SRC
** Font
#+NAME: structs
#+BEGIN_SRC c
struct uf2_font {
    uint8_t widths[256];
    struct uf2_glyph glyphs[256];
};
#+END_SRC
* uf2 struct size
Should be 8448 (256 header size + 8192 (256 * 32)
bitmap data).
#+NAME: funcdefs
#+BEGIN_SRC c
size_t uf2_size(void);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
size_t uf2_size(void)
{
    return sizeof(struct uf2_font);
}
#+END_SRC
* Load A Font
#+NAME: funcdefs
#+BEGIN_SRC c
int uf2_load(struct uf2_font *fnt, const char *filename);
#+END_SRC
#+NAME: funcs
#+BEGIN_SRC c
int uf2_load(struct uf2_font *fnt, const char *filename)
{
    FILE *fp;
    fp = fopen(filename, "rb");
    if (fp == NULL) return 1;
    fread(fnt, 1, sizeof(struct uf2_font), fp);
    fclose(fp);
    return 0;
}
#+END_SRC
* Rendering
#+NAME: funcdefs
#+BEGIN_SRC c
int btprnt_uf2_draw_textline(btprnt_region *r,
                             struct uf2_font *fnt,
                             int xoff, int yoff,
                             const char *line,
                             int scale);
int btprnt_uf2_draw_bytes(btprnt_region *r,
                          struct uf2_font *fnt,
                          int xoff, int yoff,
                          const unsigned char *buf,
                          size_t len,
                          int scale);
#+END_SRC
** Textline
#+NAME: funcs
#+BEGIN_SRC c
int btprnt_uf2_draw_textline(btprnt_region *r,
                             struct uf2_font *fnt,
                             int xoff, int yoff,
                             const char *line,
                             int scale)
{
    return btprnt_uf2_draw_bytes(r,
                                 fnt,
                                 xoff, yoff,
                                 (const unsigned char *)line,
                                 strlen(line), scale);
}
#+END_SRC
** Buffer
#+NAME: funcs
#+BEGIN_SRC c
<<write_block>>
int btprnt_uf2_draw_bytes(btprnt_region *r,
                          struct uf2_font *fnt,
                          int xoff, int yoff,
                          const unsigned char *buf,
                          size_t len,
                          int scale)
{
    size_t i;

    for (i = 0; i < len; i++) {
        struct uf2_glyph *g;
        uint8_t c;
        int blkoff;

        blkoff = 8*scale;
        c = buf[i];
        g = &fnt->glyphs[c];
        write_block(r, &g->tl, xoff + 0, yoff, scale);
        write_block(r, &g->bl, xoff + 0, yoff + blkoff, scale);
        write_block(r, &g->tr, xoff + blkoff, yoff, scale);
        write_block(r, &g->br, xoff + blkoff, yoff + blkoff, scale);
        xoff += fnt->widths[c]*scale;
    }

    return xoff;
}
#+END_SRC
** Write a Single Block
Fonts in UF2 are split up into 4 8x8 pixel blocks.
#+NAME: write_block
#+BEGIN_SRC c
static void write_block(btprnt_region *r,
                        struct uf2_block *blk,
                        int xoff, int yoff, int scale)
{
    int x, y;
    uint8_t *dat;

    dat = blk->data;
    for (y = 0; y < 8; y++) {
        for (x = 0; x < 8; x++) {
            int row;
            int qpos;
            qpos = y;
            row = dat[qpos];
            if (row & (1 << x)) {
                int ys, xs;

                for (ys = 0; ys < scale; ys++) {
                    for (xs = 0; xs < scale; xs++) {
                        btprnt_region_draw(r,
                            (7 - x)*scale + xs + xoff,
                            y*scale + ys + yoff,
                            1);
                    }
                }
            }

            /* only draw for on bits */
        }
    }

}
#+END_SRC
* LIL
** Loader
#+NAME: funcdefs
#+BEGIN_SRC c
void lil_load_uf2(lil_t lil);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
<<loadfuncs>>
void lil_load_uf2(lil_t lil)
{
    <<entries>>
}
#+END_SRC
** uf2load
Loads a uf2 font into memory into a sndkit dictionary entry.

Usage: uf2load key filename

#+NAME: entries
#+BEGIN_SRC c
lil_register(lil, "uf2load", l_uf2load);
#+END_SRC

#+NAME: loadfuncs
#+BEGIN_SRC c
static void deluf2(void *ptr)
{
    struct uf2_font *fnt;

    fnt = ptr;

    free(fnt);
    ptr = fnt = NULL;
}

static lil_value_t l_uf2load(lil_t lil,
                             size_t argc,
                             lil_value_t *argv)
{
    int rc;
    const char *key;
    const char *filename;
    struct uf2_font *fnt;
    sk_core *core;

    SKLIL_ARITY_CHECK(lil, "uf2load", argc, 2);

    core = lil_get_data(lil);

    key = lil_to_string(argv[0]);
    filename = lil_to_string(argv[1]);

    fnt = malloc(uf2_size());

    /* TODO: handle what happens if load files */
    uf2_load(fnt, filename);

    rc = sk_core_append(core, key, strlen(key),
                        fnt, deluf2);

    SKLIL_ERROR_CHECK(lil, rc, "uf2load didn't work out.");

    return NULL;
}
#+END_SRC
** uf2txtln
Wrapper for =btprnt_uf2_draw_textline=.

Usage: uf2txtln region font x y text

#+NAME: entries
#+BEGIN_SRC c
lil_register(lil, "uf2txtln", l_uf2txtln);
#+END_SRC

#+NAME: loadfuncs
#+BEGIN_SRC c
/* TODO: move getuf2 to a better spot */
static int getuf2(lil_t lil, sk_core *core, struct uf2_font **fnt)
{

    void *ud;
    int rc;

    rc = sk_core_generic_pop(core, &ud);

    if (rc) {
        lil_set_error(lil, "Could not get uf2 font");
        return 1;
    }

    *fnt = (struct uf2_font *)ud;
    return 0;
}
static lil_value_t l_uf2txtln(lil_t lil,
                              size_t argc,
                              lil_value_t *argv)
{
    int x, y;
    int rc;
    sk_core *core;
    const char *str;
    btprnt_region *reg;
    struct uf2_font *fnt;
    int scale;

    SKLIL_ARITY_CHECK(lil, "uf2txtln", argc, 5);
    core = lil_get_data(lil);

    rc = getuf2(lil, core, &fnt);
    if (rc) return NULL;

    rc = lil_btprnt_region(lil, core, &reg);
    if (rc) return NULL;

    x = lil_to_integer(argv[2]);
    y = lil_to_integer(argv[3]);
    str = lil_to_string(argv[4]);

    if (argc >= 6) {
        scale = lil_to_integer(argv[5]);
    } else {
        scale = 1;
    }

    btprnt_uf2_draw_textline(reg, fnt, x, y, str, scale);

    if (rc) return NULL;

    return NULL;
}
#+END_SRC
** uf2bytes
This is a wrapper for =btprnt_uf2_draw_bytes=.

Reads from a pre-allocated buffer (not yet invented yet).

Usage: uf2bytes region font buffer x y

#+NAME: entries
#+BEGIN_SRC c
lil_register(lil, "uf2bytes", l_uf2bytes);
#+END_SRC

#+NAME: loadfuncs
#+BEGIN_SRC c
static lil_value_t l_uf2bytes(lil_t lil,
                              size_t argc,
                              lil_value_t *argv)
{
    int x, y;
    int rc;
    sk_core *core;
    btprnt_region *reg;
    struct uf2_font *fnt;
    mno_buffer *buf;
    void *ud;
    int scale;

    SKLIL_ARITY_CHECK(lil, "uf2bytes", argc, 5);
    core = lil_get_data(lil);

    rc = sk_core_generic_pop(core, &ud);
    if (rc) {
        printf("could not get buffer\n");
        return NULL;
    }
    buf = ud;

    rc = getuf2(lil, core, &fnt);
    if (rc) return NULL;

    rc = lil_btprnt_region(lil, core, &reg);
    if (rc) return NULL;

    x = lil_to_integer(argv[3]);
    y = lil_to_integer(argv[4]);
    if (argc >= 6) {
        scale = lil_to_integer(argv[5]);
    } else {
        scale = 1;
    }

    btprnt_uf2_draw_bytes(reg, fnt, x, y, buf->buf, buf->len, scale);

    if (rc) return NULL;

    return NULL;
}
#+END_SRC
