* 2024-04-03T06:15:05-04:00 Getting Started
Re-doing this debugging session, this time with notes.

The core issue is: XMT does not handle the welcome
to gestleton XM file properly. Converting the xm to
msgback and back will not produce an identical
XM file.

$ ./mnolth xmt -d welcome_to_gestleton.xm welcome.bin
$ ./mnolth xmt welcome.bin test.xm
$ radiff2 welcome_togestleton.xm test.xm | wc -l
46

Differences can be visualized using xxd and diff.

$ xxd welcome_to_gestleton.xm > welcome_xxd.txt
$ xxd test.xm > test_xxd.txt
$ diff welcome_xxd.txt test_xxd.txt

--- welcome_xxd.txt
+++ test_xxd.txt
@@ -182,13 +182,13 @@
 00000b50: 0000 0000 0000 0000 0000 0000 0000 0000  ................
 00000b60: 0000 0000 0000 0000 0000 0000 0000 0000  ................
 00000b70: 0000 0000 0000 0000 0000 0000 0000 0000  ................
-00000b80: 0000 0000 0000 0000 0000 0000 3000 0400  ............0...
-00000b90: 4000 0800 2c00 0e00 0800 1800 1600 2000  @...,......... .
-00000ba0: 0800 3c00 0000 4600 0000 5000 0000 5a00  ..<...F...P...Z.
-00000bb0: 0000 6400 0000 6e00 0000 0000 2000 0a00  ..d...n..... ...
-00000bc0: 2800 1e00 1800 3200 2000 3c00 2000 4600  (.....2. .<. .F.
-00000bd0: 2000 5000 2000 5a00 2000 6400 2000 6e00   .P. .Z. .d. .n.
-00000be0: 2000 7800 2000 8200 2000 0606 0203 0502   .x. ... .......
+00000b80: 0000 0000 0000 0000 0000 0000 2000 0a00  ............ ...
+00000b90: 2800 1e00 1800 3200 2000 3c00 2000 4600  (.....2. .<. .F.
+00000ba0: 2000 5000 2000 5a00 2000 6400 2000 6e00   .P. .Z. .d. .n.
+00000bb0: 2000 7800 2000 8200 2000 0000 0000 0000   .x. ... .......
+00000bc0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
+00000bd0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
+00000be0: 0000 0000 0000 0000 0000 0606 0203 0502  ................
 00000bf0: 0305 0000 0000 0800 8000 0000 0000 0000  ................
 00000c00: 0000 0000 0000 0000 0000 0000 0000 0000  ................
 00000c10: b004 0000 0000 0000 b004 0000 4068 1180  ............@h..

Troubled region is in area b80-be0. Specifically,
it starts at b8c and ends at be8.

So, where is that?

* 2024-04-03T06:24:58-04:00 Identifying problem region
Where does the b8c and be8 region lie? Reading the hex
manually is a bit of a chore, so instead we'll just
print some offset information in the XMT parser.

This can be done by adding offset position data to
the =xm_iodat= struct.

I did this already, so I already know it is somewhere
in the instrument/sample data.
* 2024-04-03T06:37:09-04:00 Added some printf statements
Keeping track of the XM reader position, I found
the problem areas are in the sample data. Specifically,
the volume and panning columns:

vol: 0xb8a
pan: 0xbba
nvol: 0xbea

Specifically, these are the volume and panning
envelops, each of these are arrays of 24 16-bit words.
* 2024-04-03T06:40:34-04:00 Verification pan/vol is being read correctly
I'm going to print out information to check and see that
the panning/volume envelops are being read correctly.

How I'll do this is just by printing the contents of
these values after they have been read, and then comparing
it with the actual results stored in the hex dump.
* 2024-04-03T06:47:40-04:00 pan/vol correct. is msgpack writing correctly?
I have confirmed that pan/vol envelopes are being read correctly.
Now I need to see if the msgpack is being written
correctly.

Procedure for this: load msgpack up and dump pan/vol
envelop date in identical format to what I was printing
previously. Write both results to text files, and compare
using diff.

I did this last night in a quick lua program I wrote,
will reproduce again.

@code
mp = require("MessagePack")
pp = require("pprint")

fp = io.open("welcome.bin", "rb")

data = mp.unpack(fp:read("*all"))

vol = data.instruments[1].vol
print("VOL")
for k,v in pairs(vol) do
    print(string.format("0x%04x: %04x", k - 1, v));
end

print("PAN")
pan = data.instruments[1].pan

for k,v in pairs(pan) do
    print(string.format("0x%04x: %04x", k - 1, v));
end

fp:close()
@end
* 2024-04-03T06:55:33-04:00 msgpack write correct. msgpack read?
My msgpack experiment proved that the data is being
written correctly to disk.

XM to msgpack conversion is not the issue. msgpack to
XM is the issue. First, we make sure the C program
is reading msgpack values correctly.

Similar to Lua test, generate print statements after
reading pan/vol from msgpack, write to disk, then compare
with diff.
* 2024-04-03T07:04:07-04:00 Pan data read incorrect?
Huh. I think I was reading into the volume variable
twice, and never reading into pan. Could this have
been the issue?
* 2024-04-03T07:05:38-04:00 Did I fix this?
Pan info was being loaded into vol accidentally. It
was such a trivial fix I didn't think to test it beforehand.
Re-testing things now.
* 2024-04-03T07:07:44-04:00 Fixed!
Welcome to gestleton XM file can be converted to
and from msgpack and be bit accurate. Joy!

I'm leaving the offset information in here for now, but
removing printfs.
